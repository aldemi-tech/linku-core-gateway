name: Payment Domain - CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'src/**'
      - 'package.json'
      - '.github/workflows/payment-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'package.json'

env:
  NODE_VERSION: '18'

jobs:
  # Test y Build
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: üõéÔ∏è Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üì¶ Install dependencies
      run: npm ci
      
    - name: üß™ Run tests
      run: npm test
      
    - name: üî® Build project
      run: npm run build
      
    - name: üìä Run linter
      run: npm run lint
      
    # Subir artefactos para deploy
    - name: üì§ Upload build artifacts
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: payment-build
        path: |
          lib/
          package.json
          firebase.json
        retention-days: 1

  # Deploy solo en main y si los tests pasan
  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment: production
    
    steps:
    - name: üõéÔ∏è Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üì¶ Install dependencies
      run: npm ci
      
    - name: üì• Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: payment-build
        
    - name: üîß Setup Firebase CLI
      uses: w9jds/firebase-action@master
      with:
        args: --version
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        
    - name: üöÄ Deploy to Firebase
      uses: w9jds/firebase-action@master
      with:
        args: deploy --only functions:paymentTokenizeCardDirect,functions:paymentCreateTokenizationSession,functions:paymentCompleteTokenization,functions:paymentProcessPayment,functions:paymentRefundPayment,functions:paymentWebhook,functions:paymentGetAvailableProviders,functions:paymentGetExecutionLocation --force
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        
    - name: üìã Create deployment summary
      run: |
        echo "## üöÄ Payment Functions Deployed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Functions deployed:" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ paymentTokenizeCardDirect" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ paymentCreateTokenizationSession" >> $GITHUB_STEP_SUMMARY  
        echo "- ‚úÖ paymentCompleteTokenization" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ paymentProcessPayment" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ paymentRefundPayment" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ paymentWebhook" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ paymentGetAvailableProviders" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ paymentGetExecutionLocation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment info:" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

  # Notificar sobre el deploy
  notify:
    needs: [test-and-build, deploy]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: üì¢ Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Payment functions deployed successfully!"
        else
          echo "‚ùå Payment functions deployment failed!"
          exit 1
        fi